generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  phone    String  @unique @db.VarChar(16)
  name     String? @db.VarChar(128)
  password String  @db.VarChar(128)
  role     Role    @default(MANAGER)
}

model Order {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name              String?   @db.VarChar(128)
  phone             String?   @db.VarChar(16)
  comment           String?   @db.VarChar(256)
  endDateJob        DateTime? @map("end_date_job")
  workerArrivalDate DateTime? @map("worker_arrival_date")
  status            Status    @default(MANAGER)
  getPrePaymentDate DateTime? @map("get_pre_payment_date")
  getAllPaymentDate DateTime? @map("get_all_payment_date")

  managerName  String? @map("manager_name") @db.VarChar(128)
  managerphone String? @map("manager_phone") @db.VarChar(16)

  zamirName  String? @map("zamir_name") @db.VarChar(128)
  zamirPhone String? @map("zamir_phone") @db.VarChar(16)

  zavodName  String? @map("zavod_name") @db.VarChar(128)
  zavodPhone String? @map("zavod_phone") @db.VarChar(16)

  ustName  String? @map("ust_name") @db.VarChar(128)
  ustPhone String? @map("ust_phone") @db.VarChar(16)

  total      Int?
  prePayment Int? @map("pre_payment")
  dueAmount  Int? @map("due_amount")

  regionId  String? @map("region_id") @db.Uuid
  region    Region? @relation(fields: [regionId], references: [id], onDelete: Cascade)
  longitude Float?
  latitude  Float?

  socialId String? @map("social_id") @db.Uuid
  social   Social? @relation(fields: [socialId], references: [id], onDelete: Cascade)

  orderStatusId String?      @map("order_status_id") @db.Uuid
  orderStatus   OrderStatus? @relation(fields: [orderStatusId], references: [id], onDelete: Cascade)

  roomMeasurement RoomMeasurement[]
  currencyOrder   CurrencyOrder[]
}

model OrderStatus {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String @unique @db.VarChar(128)
  color Int?   @default(0) @db.Integer

  orders Order[]

  @@map("order_status")
}

model Region {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique @db.VarChar(128)

  orders  Order[]
  History History[]
}

model Social {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique @db.VarChar(128)

  orders  Order[]
  History History[]
}

model RoomMeasurement {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String? @db.VarChar(128)
  key   String? @db.VarChar(128)
  value String? @db.VarChar(512)

  orderId String @map("order_id") @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("room_measurement")
}

model History {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name              String?   @db.VarChar(128)
  phone             String?   @db.VarChar(16)
  comment           String?   @db.VarChar(256)
  endDateJob        DateTime? @map("end_date_job")
  workerArrivalDate DateTime? @map("worker_arrival_date")
  status            Status
  orderId           String?   @db.Uuid
  getPrePaymentDate DateTime? @map("get_pre_payment_date")
  getAllPaymentDate DateTime? @map("get_all_payment_date")

  total      Int?
  prePayment Int? @map("pre_payment")
  dueAmount  Int? @map("due_amount")

  managerName  String? @map("manager_name") @db.VarChar(128)
  managerphone String? @map("manager_phone") @db.VarChar(16)

  zamirName  String? @map("zamir_name") @db.VarChar(128)
  zamirPhone String? @map("zamir_phone") @db.VarChar(16)

  zavodName  String? @map("zavod_name") @db.VarChar(128)
  zavodPhone String? @map("zavod_phone") @db.VarChar(16)

  ustName  String? @map("ust_name") @db.VarChar(128)
  ustPhone String? @map("ust_phone") @db.VarChar(16)

  regionId  String? @map("region_id") @db.Uuid
  region    Region? @relation(fields: [regionId], references: [id], onDelete: Cascade)
  longitude Float?
  latitude  Float?

  socialId String? @map("social_id") @db.Uuid
  social   Social? @relation(fields: [socialId], references: [id], onDelete: Cascade)
}

model PermissionAll {
  id     String  @id @default(uuid())
  path   String  @unique
  get    Boolean @default(false)
  post   Boolean @default(false)
  patch  Boolean @default(false)
  delete Boolean @default(false)

  @@map("permission_all")
}

model CurrencyOrder {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String? @unique @db.VarChar(128)
  card Int? @default(0) @db.Integer 
  cash Int? @default(0) @db.Integer 

  orederId String @map("order_id") @db.Uuid
  order    Order  @relation(fields: [orederId], references: [id], onDelete: Cascade)

  @@map("currency_order")
}

enum Role {
  ADMIN
  MANAGER
  ZAMIR
  ZAVOD
  USTANOVCHIK
}

enum Status {
  MANAGER
  ZAMIR
  ZAVOD
  USTANOVCHIK
  DONE
  CANCEL
}
